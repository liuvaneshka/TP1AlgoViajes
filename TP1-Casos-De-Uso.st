TestCase subclass: #AlgoViajesTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:48'!test02ElViajeMasBaratoParaUnUsuarioExtranjeroHaciaUnDestinoDeSudamericaEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |		"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Alejo' deNacionalidad: 'Italiana' conDestinoACiudad: 'Cuzco' delPais: 'Peru' aKms: 3247.	tarifaEsperada := (3247 "Kms" raisedTo: 1.12 "tarifa de preembarco a destino mercosur") "No hay descuento de extranjero a viaje a sudamerica".	tarifaEsperada := tarifaEsperada raisedTo: 1.2 "Recargo por Extranjero".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Alejo'.		"Assert"	self assert: (viajeObtenido destino) equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:52'!test05ElViajeMasBaratoParaUnUsuarioArgentinoEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Ushuaia' delPais: 'Argentina' aKms: 2377.	tarifaEsperada := ((2377 "Kms" * 1.28 "tarifa destino nacional") sqrt "Descuento por ley de impulso turismo nacional") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Pablo'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Ushuaia' en: 'Argentina').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:53'!test06ElViajeMasBaratoParaUnUsuarioArgentinoHaciaUnDestinoDeSudamericaEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Diego' deNacionalidad: 'Argentina' conDestinoACiudad: 'Cuzco' delPais: 'Peru' aKms: 3247.	tarifaEsperada := (3247 "Kms" raisedTo: 1.12 "tarifa de preembarco a destino mercosur") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Diego'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:45'!test01ElViajeMasBaratoParaUnUsuarioExtranjeroEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |		"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Alejo' deNacionalidad: 'Italiana' conDestinoACiudad: 'Ushuaia' delPais: 'Argentina' aKms: 2377.	tarifaEsperada := ((2377 "Kms" * 1.28 "tarifa destino nacional") - 1500 "Descuento por extranjero yendo a destino nacional").	tarifaEsperada := tarifaEsperada raisedTo: 1.2 "Recargo por Extranjero".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Alejo'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Ushuaia' en: 'Argentina').		self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/9/2023 01:27'!test12ElViajeMasBaratoParaUnUsuarioExtranjeroDadoUnDestinoSudamericanoYUnoInternacionalEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.		algoViajes registrarPasajePara: 'Joaquin' deNacionalidad: 'Española' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.	algoViajes registrarPasajePara: 'Joaquin' deNacionalidad: 'Española' conDestinoACiudad: 'Cusco' delPais: 'Peru' aKms: 3236.	tarifaEsperada := (10215 "Kms" log + 3600 "tarifa de preembarco con destino internacional")  "No hay descuento de extranjero a viaje internacional".	tarifaEsperada := tarifaEsperada raisedTo: 1.2 "Recargo por Extranjero".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Joaquin'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Lisboa' en: 'Portugal').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada	! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:55'!test08ElMismoViajeConDestinoNacionalResultaMasBaratoParaUnUsuarioArgentino	| algoViajes viajeCaro viajeBarato tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Alejo' deNacionalidad: 'Italiana' conDestinoACiudad: 'Ushuaia' delPais: 'Argentina' aKms: 2377.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Ushuaia' delPais: 'Argentina' aKms: 2377.	tarifaEsperada := ((2377 "Kms" * 1.28 "tarifa destino nacional") sqrt "Descuento por ley de impulso turismo nacional") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeCaro := algoViajes viajeIndicadoSegunCriterioPara: 'Alejo'.	viajeBarato :=  algoViajes viajeIndicadoSegunCriterioPara: 'Pablo'.		"Assert"	self assert: viajeBarato tarifa < viajeCaro tarifa.	self assert: (viajeBarato destino)  equals: (CiudadEsperada nombre: 'Ushuaia' en: 'Argentina').	self assert: (viajeBarato tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:51'!test04ElViajeMasBaratoParaUnUsuarioExtranjeroHaciaUnDestinoInternacionalEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Alejo' deNacionalidad: 'Italiana' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.		tarifaEsperada := (10215 "Kms" log + 3600 "tarifa de preembarco con destino internacional")  "No hay descuento de extranjero a viaje internacional".	tarifaEsperada := tarifaEsperada raisedTo: 1.2 "Recargo por Extranjero".	"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Alejo'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Lisboa' en: 'Portugal').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:56'!test09ElMismoViajeConDestinoSudamericanoResultaMasBaratoParaUnUsuarioArgentino	| algoViajes viajeCaro viajeBarato tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Alejo' deNacionalidad: 'Italiana' conDestinoACiudad: 'Cuzco' delPais: 'Peru' aKms: 3247.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Cuzco' delPais: 'Peru' aKms: 3247.	tarifaEsperada := (3247 "Kms" raisedTo: 1.12 "tarifa de preembarco a destino mercosur") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeCaro := algoViajes viajeIndicadoSegunCriterioPara: 'Alejo'.	viajeBarato :=  algoViajes viajeIndicadoSegunCriterioPara: 'Pablo'.		"Assert"	self assert: viajeBarato tarifa < viajeCaro tarifa.	self assert: (viajeBarato destino)  equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: (viajeBarato tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:57'!test10ElMismoViajeConDestinoInternacionalResultaMasBaratoParaUnUsuarioNacional	| algoViajes viajeCaro viajeBarato tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Alejo' deNacionalidad: 'Italiana' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.	tarifaEsperada := (10215 "Kms" log + 3600 "tarifa de preembarco con destino internacional")  *1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeBarato := algoViajes viajeIndicadoSegunCriterioPara: 'Pablo'.	viajeCaro :=  algoViajes viajeIndicadoSegunCriterioPara: 'Alejo'.		"Assert"	self assert: viajeBarato tarifa < viajeCaro tarifa.	self assert: (viajeBarato destino)  equals: (CiudadEsperada nombre: 'Lisboa' en: 'Portugal').	self assert: (viajeBarato tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/9/2023 01:25'!test11ElViajeMasBaratoParaUnUsuarioArgentinoEntreDistintasOpcionesEsElNacional	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.		algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Ushuaia' delPais: 'Argentina' aKms: 2377.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Cuzco' delPais: 'Peru' aKms: 3247.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.	tarifaEsperada := ((2377 "Kms" * 1.28 "tarifa destino nacional") sqrt "Descuento por ley de impulso turismo nacional") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Pablo'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Ushuaia' en: 'Argentina').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/9/2023 01:29'!test13ElViajeMasCaroParaUnUsuarioArgentinoEntreDistintasOpcionesEsElSudamericano	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Maximo'.		algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Ushuaia' delPais: 'Argentina' aKms: 2377.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Cuzco' delPais: 'Peru' aKms: 3247.	algoViajes registrarPasajePara: 'Pablo' deNacionalidad: 'Argentina' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.	tarifaEsperada := (3247 "Kms" raisedTo: 1.12 "tarifa de preembarco a destino mercosur") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Pablo'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Cuzco' en: 'Peru').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada	! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:50'!test03ElViajeMasBaratoParaUnUsuarioExtranjeroDadoUnDestinoSudamericanoYUnoNacionalEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Joaquin' deNacionalidad: 'Española' conDestinoACiudad: 'San Carlos de Bariloche' delPais: 'Argentina' aKms: 1578.	algoViajes registrarPasajePara: 'Joaquin' deNacionalidad: 'Española' conDestinoACiudad: 'Cusco' delPais: 'Peru' aKms: 3236.	tarifaEsperada := ((1578 "Kms" * 1.28 "tarifa destino nacional") - 1500 "Descuento por extranjero yendo a destino nacional"). 	tarifaEsperada := tarifaEsperada raisedTo: 1.2 "Recargo por Extranjero".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Joaquin'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'San Carlos de Bariloche' en: 'Argentina').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada	! !!AlgoViajesTest methodsFor: 'tests' stamp: 'liugutierrez 4/8/2023 23:54'!test07ElViajeMasBaratoParaUnUsuarioArgentinoHaciaUnDestinoInternacionalEsElIndicado	| algoViajes viajeObtenido tarifaEsperada |	"Arrange"	algoViajes := AlgoViajes conCriterio: 'Minimo'.	algoViajes registrarPasajePara: 'Diego' deNacionalidad: 'Argentina' conDestinoACiudad: 'Lisboa' delPais: 'Portugal' aKms: 10215.	tarifaEsperada := (10215 "Kms" log + 3600 "tarifa de preembarco con destino internacional") * 1.2 "Impuesto al viaje para turistas nacionales".		"Act"	viajeObtenido := algoViajes viajeIndicadoSegunCriterioPara: 'Diego'.		"Assert"	self assert: (viajeObtenido destino)  equals: (CiudadEsperada nombre: 'Lisboa' en: 'Portugal').	self assert: (viajeObtenido tarifa) equals: tarifaEsperada! !Class subclass: #CiudadEsperada	instanceVariableNames: 'nombre pais paisesMercosur'	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!CiudadEsperada methodsFor: 'comparing' stamp: 'JG 4/5/2023 11:28'!= other	^nombre = (other nombre).! !!CiudadEsperada methodsFor: 'comparing' stamp: 'liugutierrez 4/8/2023 21:53'!esMercosur	^(paisesMercosur includes: pais).! !!CiudadEsperada methodsFor: 'comparing' stamp: 'AV 4/5/2023 11:22'!establecerPais: unPais	pais := unPais.! !!CiudadEsperada methodsFor: 'comparing' stamp: 'AV 4/5/2023 11:21'!establecerNombre: unNombre	nombre := unNombre.! !!CiudadEsperada methodsFor: 'acceso' stamp: 'liugutierrez 4/8/2023 11:47'!nombre	^ nombre! !!CiudadEsperada methodsFor: 'acceso' stamp: 'liugutierrez 4/8/2023 21:46'!esNacional	^pais = 'Argentina'! !!CiudadEsperada methodsFor: 'acceso' stamp: 'liugutierrez 4/8/2023 22:31'!esInternacional 	^(pais ~= 'Argentina') and: [(paisesMercosur includes: pais)not]. ! !!CiudadEsperada methodsFor: 'initialization' stamp: 'liugutierrez 4/8/2023 21:53'!initialize 	paisesMercosur := OrderedCollection new.	paisesMercosur add: 'Peru'.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CiudadEsperada class	instanceVariableNames: ''!!CiudadEsperada class methodsFor: 'as yet unclassified' stamp: 'AV 4/5/2023 11:21'!nombre: unNombre en: unPais | ciudadEsperada | 	ciudadEsperada := self new.	ciudadEsperada establecerNombre: unNombre. 	ciudadEsperada establecerPais: unPais.	^ ciudadEsperada ! !TestCase subclass: #PasajeroTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-De-Uso'!!PasajeroTest methodsFor: 'tests' stamp: 'liugutierrez 4/10/2023 16:55'!test01	| pasajero pasajeroObtenido nombre nacionalidad |		nombre := 'Alejo'.	nacionalidad := 'Italiana'.		"Arrange"	pasajero := Pasajero con: nombre de: nacionalidad.		"Assert"	self assert: (pasajero isKindOf: PasajeroExtranjero) .		self assert: (pasajero nombre) equals: nombre! !!PasajeroTest methodsFor: 'tests' stamp: 'liugutierrez 4/10/2023 16:56'!test02	| pasajero pasajeroObtenido nombre nacionalidad |		nombre := 'Alejo'.	nacionalidad := 'Argentina'.		"Arrange"	pasajero := Pasajero con: nombre de: nacionalidad.		"Assert"	self assert: (pasajero isKindOf: PasajeroNativo) .		self assert: (pasajero nombre) equals: nombre! !