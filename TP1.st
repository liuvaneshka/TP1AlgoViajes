Object subclass: #AlgoViaje	instanceVariableNames: 'criterio pasajero destino pasaje viajes'	classVariableNames: ''	package: 'TP1'!!AlgoViaje methodsFor: 'inicializacion' stamp: 'lvg 4/15/2023 04:16'!initializeConCriterio	viajes := OrderedCollection new.! !!AlgoViaje methodsFor: 'privado' stamp: 'lvg 4/15/2023 04:57'!seleccionarViajesDeUnPasajeroCon: unNombre	^(viajes select: [:pasajeActual| pasajeActual esDelPasajeroDe: unNombre ]).! !!AlgoViaje methodsFor: 'privado' stamp: 'lvg 4/15/2023 04:20'!viajeIndicadoSegunCriterioPara: unNombre 	self subclassResponsibility ! !!AlgoViaje methodsFor: 'publico' stamp: 'lvg 4/16/2023 22:41'!registrarPasajePara: unNombre deNacionalidad: unaNacionalidad conDestinoACiudad: unaCiudad delPais: unPais aKms: unaDistancia	pasajero := Pasajero con: unNombre de: unaNacionalidad.	destino := Destino aCiudad: unaCiudad delPais: unPais aUnaDistancia: unaDistancia.	pasaje := Viaje paraUn: pasajero haciaUn: destino.	viajes addLast: pasaje.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoViaje class	instanceVariableNames: ''!!AlgoViaje class methodsFor: 'inicilizacion constructor' stamp: 'liugutierrez 4/19/2023 03:07'!conCriterio: unCriterio	| algoViajeSubclass |		algoViajeSubclass := self subclasses detect: [ : unaSubclaseDeAlgoViaje | 														unaSubclaseDeAlgoViaje tipoDeCriterio: unCriterio] ifNone:[^CriterioInvalido].		^ algoViajeSubclass new initializeConCriterio.! !!AlgoViaje class methodsFor: 'inicilizacion constructor' stamp: 'lvg 4/15/2023 04:14'!tipoDeCriterio: unCriterio	self subclassResponsibility! !AlgoViaje subclass: #AlgoViajeMaximo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!AlgoViajeMaximo methodsFor: 'seleccion' stamp: 'lvg 4/15/2023 04:21'!viajeIndicadoSegunCriterioPara: unNombre 	^ (self seleccionarViajesDeUnPasajeroCon: unNombre) detectMax: [ : pasajeActual | pasajeActual tarifa ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoViajeMaximo class	instanceVariableNames: ''!!AlgoViajeMaximo class methodsFor: 'not defined category' stamp: 'lvg 4/15/2023 04:15'!tipoDeCriterio: unCriterio		^unCriterio = 'Maximo'.! !AlgoViaje subclass: #AlgoViajeMinimo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!AlgoViajeMinimo methodsFor: 'seleccion' stamp: 'lvg 4/15/2023 04:58'!viajeIndicadoSegunCriterioPara: unNombre 	^ (self seleccionarViajesDeUnPasajeroCon: unNombre) detectMin: [ :a | a tarifa ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoViajeMinimo class	instanceVariableNames: ''!!AlgoViajeMinimo class methodsFor: 'not defined category' stamp: 'lvg 4/15/2023 04:15'!tipoDeCriterio: unCriterio	^unCriterio = 'Minimo'! !Object subclass: #Destino	instanceVariableNames: 'ciudad pais distancia'	classVariableNames: ''	package: 'TP1'!!Destino methodsFor: 'inicializacion' stamp: 'lvg 4/15/2023 02:51'!initializeDestinoA: unaCiudad del: unPais con: unaDistancia 	ciudad := unaCiudad.	pais :=  unPais.	distancia := unaDistancia.! !!Destino methodsFor: 'calculo' stamp: 'lvg 4/15/2023 03:10'!calcularTarifaEnBaseA: unPasajero	self subclassResponsibility.! !!Destino methodsFor: 'acceso' stamp: 'liugutierrez 4/19/2023 08:38'!destinoEsperado	^ CiudadEsperada nombre: ciudad  en: pais.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Destino class	instanceVariableNames: ''!!Destino class methodsFor: 'validacion' stamp: 'liugutierrez 4/19/2023 09:15'!tipoDe: unPais	self subclassResponsibility! !!Destino class methodsFor: 'validacion' stamp: 'liugutierrez 4/19/2023 10:36'!esSudamerica: unPais	| mercosur |	mercosur := #( 'Peru' 'Venezuela' 'Argentina').	^ mercosur includes: unPais! !!Destino class methodsFor: 'validacion' stamp: 'liugutierrez 4/19/2023 09:44'!esMercosur: unPais	| mercosur |	mercosur := #( 'Peru' 'Venezuela').	^ mercosur includes: unPais! !!Destino class methodsFor: 'inicializacion constructor' stamp: 'liugutierrez 4/19/2023 09:15'!aCiudad: unaCiudad delPais: unPais aUnaDistancia: unaDistancia 		| destino |		destino := self subclasses detect: [ : unDestinoSubclase | unDestinoSubclase  tipoDe: unPais]."	(self assertDistanciaValida: unaDistancia) ifTrue: [  destino := self subclasses detect: [ : unDestinoSubclase | unDestinoSubclase 																				tipoDeDestino: unPais ]] ifFalse: [  ^ DistanciaInvalida]."		^destino new initializeDestinoA: unaCiudad del: unPais con: unaDistancia.! !Destino subclass: #DestinoInternacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DestinoInternacional methodsFor: 'calculo' stamp: 'lvg 4/15/2023 04:05'!tarifaBaseViajeInternacional	^ distancia log + 3600! !!DestinoInternacional methodsFor: 'double dispatch pasajero  - calculo' stamp: 'lvg 4/15/2023 04:03'!calcularTarifaEnBaseA: unPasajero	| tarifaEsperada |			tarifaEsperada := 0.	tarifaEsperada := self tarifaBaseViajeInternacional.	^ tarifaEsperada := unPasajero calcularImpuesto: tarifaEsperada. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DestinoInternacional class	instanceVariableNames: ''!!DestinoInternacional class methodsFor: 'abstraccion' stamp: 'liugutierrez 4/19/2023 10:35'!tipoDe: unPais	^ (self esSudamerica: unPais ) not 	"^ (unPais ~= 'Argentina') and: [(self esMercosur: unPais)not]."! !Destino subclass: #DestinoMercosur	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DestinoMercosur methodsFor: 'double dispatch  pasajero - calculo' stamp: 'lvg 4/15/2023 04:02'!calcularTarifaEnBaseA: unPasajero	| tarifaEsperada |			tarifaEsperada := 0.	tarifaEsperada := self tarifaBaseParaViajesDentroDeMercosur.	^ tarifaEsperada := unPasajero calcularImpuesto: tarifaEsperada. 				               ! !!DestinoMercosur methodsFor: 'calculo' stamp: 'lvg 4/15/2023 04:04'!tarifaBaseParaViajesDentroDeMercosur	^ distancia raisedTo: 1.12! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DestinoMercosur class	instanceVariableNames: ''!!DestinoMercosur class methodsFor: 'abstraccion' stamp: 'liugutierrez 4/19/2023 10:34'!tipoDe: unPais	^ self esMercosur: unPais.! !Destino subclass: #DestinoNacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DestinoNacional methodsFor: 'double dispatch pasajero - calculo' stamp: 'lvg 4/15/2023 05:00'!calcularTarifaEnBaseA: unPasajero	| tarifaEsperada |	tarifaEsperada := 0.	tarifaEsperada := self tarifaBaseViajeNacional.	tarifaEsperada := self calcularDescuentoPara: unPasajero aLa: tarifaEsperada.	^ tarifaEsperada := unPasajero calcularImpuesto: tarifaEsperada. ! !!DestinoNacional methodsFor: 'calculo' stamp: 'lvg 4/15/2023 03:22'!tarifaBaseViajeNacional	^ distancia * 1.28! !!DestinoNacional methodsFor: 'double dispatch - destino nacional' stamp: 'lvg 4/15/2023 04:59'!calcularDescuentoPara: unPasajero aLa: unaTarifa	^unPasajero tipoDeDescuento: unaTarifa.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DestinoNacional class	instanceVariableNames: ''!!DestinoNacional class methodsFor: 'not defined category' stamp: 'liugutierrez 4/19/2023 09:15'!tipoDe: unPais	^ unPais = 'Argentina'! !Object subclass: #Pasajero	instanceVariableNames: 'nombre nacionalidad'	classVariableNames: ''	package: 'TP1'!!Pasajero methodsFor: 'comparasion' stamp: 'lvg 4/15/2023 03:53'!seLlama: unNombre 	^nombre = unNombre.! !!Pasajero methodsFor: 'double dispatch destino - calculo' stamp: 'lvg 4/16/2023 14:44'!calcularImpuesto: unaTarifa 	self subclassResponsibility! !!Pasajero methodsFor: 'double dispatch destino - calculo' stamp: 'lvg 4/15/2023 05:38'!impuesto	^ 1.2! !!Pasajero methodsFor: 'inicializacion' stamp: 'lvg 4/15/2023 02:49'!initializePasajero: unNombre de: unaNacionalidad 	nombre := unNombre.	nacionalidad := unaNacionalidad.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pasajero class	instanceVariableNames: ''!!Pasajero class methodsFor: 'inicializacion constructor' stamp: 'lvg 4/15/2023 02:47'!con: unNombre de: unaNacionalidad 	| pasajero  |	pasajero := self subclasses detect: [ : unPasajeroSubclase | unPasajeroSubclase 																				tipoDePasajero: unaNacionalidad ].	^pasajero new initializePasajero: unNombre de: unaNacionalidad.! !!Pasajero class methodsFor: 'inicializacion constructor' stamp: 'lvg 4/14/2023 18:23'!tipoDePasajero: unaNacionalidad 	self subclassResponsibility.! !Pasajero subclass: #PasajeroArgentino	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!PasajeroArgentino methodsFor: 'double dispatch destino - calculo' stamp: 'lvg 4/15/2023 04:08'!calcularImpuesto: unaTarifa 	^ unaTarifa * self impuesto ! !!PasajeroArgentino methodsFor: 'double dispatch destino - calculo' stamp: 'lvg 4/15/2023 05:02'!tipoDeDescuento: unaTarifa 	^unaTarifa sqrt.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PasajeroArgentino class	instanceVariableNames: ''!!PasajeroArgentino class methodsFor: 'inicializacion' stamp: 'lvg 4/14/2023 18:23'!tipoDePasajero: unaNacionalidad 	^unaNacionalidad = 'Argentina'! !Pasajero subclass: #PasajeroExtranjero	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!PasajeroExtranjero methodsFor: 'double dispatch destino - calculo' stamp: 'lvg 4/15/2023 03:27'!calcularImpuesto: unaTarifa 	^ unaTarifa raisedTo: self impuesto ! !!PasajeroExtranjero methodsFor: 'double dispatch destino - calculo' stamp: 'lvg 4/15/2023 05:01'!tipoDeDescuento: unaTarifa 	^unaTarifa - 1500.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PasajeroExtranjero class	instanceVariableNames: ''!!PasajeroExtranjero class methodsFor: 'inicializacion' stamp: 'lvg 4/14/2023 18:24'!tipoDePasajero: unaNacionalidad 	^unaNacionalidad ~= 'Argentina'! !Object subclass: #Viaje	instanceVariableNames: 'pasajero destino distancia'	classVariableNames: ''	package: 'TP1'!!Viaje methodsFor: 'setter - privado' stamp: 'lvg 4/14/2023 17:32'!establecerUnPasajero: unPasajero 	pasajero := unPasajero.! !!Viaje methodsFor: 'setter - privado' stamp: 'lvg 4/14/2023 17:34'!establecerDestino: unDestino 	destino := unDestino.! !!Viaje methodsFor: 'setter - privado' stamp: 'lvg 4/14/2023 17:34'!establecerDistancia: unaDistancia 	distancia := unaDistancia.! !!Viaje methodsFor: 'calculo' stamp: 'lvg 4/15/2023 03:35'!tarifa		^destino calcularTarifaEnBaseA: pasajero.! !!Viaje methodsFor: 'comparasion' stamp: 'lvg 4/15/2023 03:56'!esDelPasajeroDe: unNombre 	^pasajero seLlama: unNombre.! !!Viaje methodsFor: 'acceso' stamp: 'liugutierrez 4/19/2023 08:37'!destinoEsperado	^ destino destinoEsperado.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Viaje class	instanceVariableNames: ''!!Viaje class methodsFor: 'inicializacion constructor' stamp: 'lvg 4/16/2023 14:27'!paraUn: unPasajero haciaUn: unDestino 		| pasaje |		pasaje := self new.	pasaje establecerUnPasajero: unPasajero.	pasaje establecerDestino: unDestino.	pasaje establecerDistancia: 0. 		^pasaje 	! !